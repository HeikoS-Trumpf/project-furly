// ------------------------------------------------------------
//  Copyright (c) Microsoft.  All rights reserved.
//  Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
// ------------------------------------------------------------

namespace Furly.Exceptions
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using System.Text.Json.Serialization;

    /// <summary>
    /// A machine-readable format for specifying errors
    /// in HTTP and method touer responses based on
    /// <see href="https://tools.ietf.org/html/rfc7807"/>.
    /// <remarks>
    /// To not take a dependency on the asp.net core
    /// package this class is essentially the ProblemDetails
    /// object from the Microsoft.AspNetCore.Mvc namespace.
    /// It should roundtrip between the two formats.
    /// </remarks>
    /// </summary>
    [DataContract]
    public record class ErrorDetails
    {
        /// <summary>
        /// A URI reference [RFC3986] that identifies
        /// the problem type. This specification encourages
        /// that, when dereferenced, it provide human-readable
        /// documentation for the problem type (e.g., using
        /// HTML [W3C.REC-html5-20141028]). When this member
        /// is not present, its value is assumed to be
        /// "about:blank".
        /// </summary>
        [DataMember(Name = "type", Order = 0,
            EmitDefaultValue = false)]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyOrder(-5)]
        [JsonPropertyName("type")]
        public string? Type { get; set; }

        /// <summary>
        /// A short, human-readable summary of the
        /// problem type. It SHOULD NOT change from
        /// occurrence to occurrence of the problem,
        /// except for purposes of localization
        /// (e.g., using proactive content negotiation;
        /// see[RFC7231], Section 3.4).
        /// </summary>
        [DataMember(Name = "title", Order = 1,
            EmitDefaultValue = false)]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyOrder(-4)]
        [JsonPropertyName("title")]
        public string? Title { get; set; }

        /// <summary>
        /// The HTTP status code([RFC7231], Section 6)
        /// generated by the origin server for this
        /// occurrence of the problem.
        /// </summary>
        [DataMember(Name = "status", Order = 2,
            EmitDefaultValue = false)]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyOrder(-3)]
        [JsonPropertyName("status")]
        public int? Status { get; set; }

        /// <summary>
        /// A human-readable explanation specific to this
        /// occurrence of the problem.
        /// </summary>
        [DataMember(Name = "detail", Order = 3,
            EmitDefaultValue = false)]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyOrder(-2)]
        [JsonPropertyName("detail")]
        public string? Detail { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific
        /// occurrence of the problem. It may or may not
        /// yield further information if dereferenced.
        /// </summary>
        [DataMember(Name = "instance", Order = 4,
            EmitDefaultValue = false)]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyOrder(-1)]
        [JsonPropertyName("instance")]
        public string? Instance { get; set; }

        /// <summary>
        /// Gets the <see cref="IDictionary{TKey, TValue}"/> for
        /// extension members.
        /// <para>
        /// Problem type definitions MAY extend the problem details
        /// object with additional members. Extension members appear
        /// in the same namespace as other members of a problem type.
        /// </para>
        /// </summary>
        [JsonExtensionData]
#pragma warning disable CA2227 // Collection properties should be read only
        public IDictionary<string, object?> Extensions { get; set; }
#pragma warning restore CA2227 // Collection properties should be read only
            = new Dictionary<string, object?>(StringComparer.Ordinal);
    }
}
